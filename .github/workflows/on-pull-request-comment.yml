name: "branch deploy demo"

on:
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  triggered-deploy:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Create environment name based on commit SHA with hyphen
        run: |
          short_sha=$(echo "${GITHUB_SHA}" | cut -c1-6)
          echo "branch=tst-${short_sha}" >> $GITHUB_ENV
          echo "Generated environment name: tst-${short_sha}"

      - uses: github/branch-deploy@v10.3.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          environment: ${{ env.branch }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.sha }}

      - name: fake noop deploy on environment based on the branch name
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
        run: echo "I am doing a fake noop deploy on environment ${{ steps.branch-deploy.outputs.environment }}"

      - name: fake regular deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: echo "Regular deploys are not allowed for this repository. Please use noops."

      - name: pass deploy-branch outputs to the next job
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: pass-deploy-branch-outputs
        run: echo "::set-output name=environment::${{ steps.branch-deploy.outputs.environment }}"

  # Given a successful deploy, we write a message as a comment on the PR
  write-comment:
    needs: triggered-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Write a comment on the PR
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Deployed to environment ${{ steps.branch-deploy.outputs.environment }}'
            })
  